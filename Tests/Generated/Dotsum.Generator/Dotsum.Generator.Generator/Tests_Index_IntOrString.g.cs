// <auto-generated />
#pragma warning disable CS8509
using System.Threading.Tasks;
namespace Tests
{

public partial class Index
{

private partial class IntOrString : IEquatable<IntOrString>
{
    public int Index { get; }

    internal readonly object _value;

    private IntOrString(int index, object value)
    {
        System.Diagnostics.Debug.Assert(index >= 0 && index < 2);

        Index = index;
        _value = value;
    }

    public bool Equals(IntOrString other) => other is not null && other.Index == Index && Equals(_value, other._value);

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;

        return Equals((IntOrString)obj);
    }

    public override int GetHashCode() => HashCode.Combine(Index, _value);

    public static bool operator==(IntOrString left, IntOrString right) => left.Equals(right);

    public static bool operator!=(IntOrString left, IntOrString right) => !left.Equals(right);

    public static IntOrString Case0(int value) => new(0, value);

    public static IntOrString Case1(string value) => new(1, value);

    public void Switch(Action<int> f0, Action<string> f1)
    {
        switch (Index)
        {

        case 0: f0((int)_value); break;

        case 1: f1((string)_value); break;

        }
    }

    public Task Switch(Func<int, Task> f0, Func<string, Task> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1((string)_value),

        };
    }

    public TRet_ Match<TRet_>(Func<int, TRet_> f0, Func<string, TRet_> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1((string)_value),

        };
    }

    public bool IsCase0 => Index == 0;

    public bool IsCase1 => Index == 1;

    public void IfCase0(Action<int> f)
    {
        if (Index == 0)
        {
            f((int)_value);
        }
    }

    public void IfCase1(Action<string> f)
    {
        if (Index == 1)
        {
            f((string)_value);
        }
    }

    public ValueTask IfCase0(Func<int, Task> f) => Index == 0 ? new ValueTask(f((int)_value)) : ValueTask.CompletedTask;

    public ValueTask IfCase1(Func<string, Task> f) => Index == 1 ? new ValueTask(f((string)_value)) : ValueTask.CompletedTask;

    public static implicit operator IntOrString(int value) => Case0(value);

    public static implicit operator IntOrString(string value) => Case1(value);
}
}
}
