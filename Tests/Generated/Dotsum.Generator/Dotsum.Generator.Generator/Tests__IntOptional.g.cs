// <auto-generated />
#pragma warning disable CS8509
using System.Threading.Tasks;
namespace Tests
{

[System.Text.Json.Serialization.JsonConverter(typeof(IntOptional.StandardJsonConverter))]
public partial class IntOptional : IEquatable<IntOptional>
{
    public int Index { get; }

    internal readonly object _value;

    private IntOptional(int index, object value)
    {
        System.Diagnostics.Debug.Assert(index >= 0 && index < 2);

        Index = index;
        _value = value;
    }

    public bool Equals(IntOptional other) => other is not null && other.Index == Index && Equals(_value, other._value);

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;

        return Equals((IntOptional)obj);
    }

    public override int GetHashCode() => HashCode.Combine(Index, _value);

    public static bool operator==(IntOptional left, IntOptional right) => left.Equals(right);

    public static bool operator!=(IntOptional left, IntOptional right) => !left.Equals(right);

    public static IntOptional Some(int value) => new(0, value);

    public static readonly IntOptional None = new(1, default);

    public void Switch(Action<int> f0, Action f1)
    {
        switch (Index)
        {

        case 0: f0((int)_value); break;

        case 1: f1(); break;

        }
    }

    public Task Switch(Func<int, Task> f0, Func<Task> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1(),

        };
    }

    public TRet_ Match<TRet_>(Func<int, TRet_> f0, Func<TRet_> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1(),

        };
    }

    public bool IsSome => Index == 0;

    public bool IsNone => Index == 1;

    public void IfSome(Action<int> f)
    {
        if (Index == 0)
        {
            f((int)_value);
        }
    }

    public void IfNone(Action f)
    {
        if (Index == 1)
        {
            f();
        }
    }

    public ValueTask IfSome(Func<int, Task> f) => Index == 0 ? new ValueTask(f((int)_value)) : ValueTask.CompletedTask;

    public ValueTask IfNone(Func<Task> f) => Index == 1 ? new ValueTask(f()) : ValueTask.CompletedTask;

    public static implicit operator IntOptional(int value) => Some(value);

    public partial class StandardJsonConverter : System.Text.Json.Serialization.JsonConverter<IntOptional>
    {
        public override IntOptional? Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            if (reader.TokenType == System.Text.Json.JsonTokenType.Null)
            {
                return default;
            }

            if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
            {
                throw new System.Text.Json.JsonException($"Expected StartObject token but found: {reader.TokenType}");
            }

            reader.Read();

            if (reader.TokenType != System.Text.Json.JsonTokenType.PropertyName)
            {
                throw new System.Text.Json.JsonException($"Expected PropertyName token but found: {reader.TokenType}");
            }

            var index = int.Parse(reader.GetString());

            reader.Read();

            var ret = index switch
            {
                0 => IntOptional.Some(System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options)),
                1 => IntOptional.None,
            };

            reader.Read();

            if (reader.TokenType != System.Text.Json.JsonTokenType.EndObject)
            {
                throw new System.Text.Json.JsonException($"Expected EndObject token but found: {reader.TokenType}");
            }

            return ret;
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, IntOptional value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStartObject();

            switch (value.Index)
            {
            case 0:

                writer.WritePropertyName("0");
                System.Text.Json.JsonSerializer.Serialize(writer, value._value, options);

                break;
            case 1:

                writer.WriteNull("1");

                break;
            }

            writer.WriteEndObject();
        }
    }
}
}
