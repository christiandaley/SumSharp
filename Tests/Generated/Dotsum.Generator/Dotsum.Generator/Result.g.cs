// <auto-generated />
#pragma warning disable CS8509
using System.Threading.Tasks;
namespace Tests {

public partial class Result<T, U> : IEquatable<Result<T, U>>
{
    private object _value;

    public int Index { get; private set; }

    private Result(int index, object value)
    {
        Index = index;
        _value = value;
    }

    public bool Equals(Result<T, U> other) => other is not null && other.Index == Index && Equals(_value, other._value);

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;

        return Equals((Result<T, U>)obj);
    }

    public override int GetHashCode() => HashCode.Combine(Index, _value);

    public static bool operator==(Result<T, U> left, Result<T, U> right) => left.Equals(right);

    public static bool operator!=(Result<T, U> left, Result<T, U> right) => !left.Equals(right);

    public static Result<T, U> Ok(T value) => new(0, value);

    public static Result<T, U> Error(U value) => new(1, value);

    public void Switch(Action<T> f0, Action<U> f1)
    {
        switch (Index)
        {

        case 0: f0((T)_value); break;

        case 1: f1((U)_value); break;

        }
    }

    public Task Switch(Func<T, Task> f0, Func<U, Task> f1)
    {
        return Index switch
        {

            0 => f0((T)_value),

            1 => f1((U)_value),

        };
    }

    public TRet_ Match<TRet_>(Func<T, TRet_> f0, Func<U, TRet_> f1)
    {
        return Index switch
        {

            0 => f0((T)_value),

            1 => f1((U)_value),

        };
    }

    public bool IsOk => Index == 0;

    public bool IsError => Index == 1;

    public void IfOk(Action<T> f)
    {
        if (Index == 0)
        {
            f((T)_value);
        }
    }

    public void IfError(Action<U> f)
    {
        if (Index == 1)
        {
            f((U)_value);
        }
    }

    public ValueTask IfOk(Func<T, Task> f) => Index == 0 ? new ValueTask(f((T)_value)) : ValueTask.CompletedTask;

    public ValueTask IfError(Func<U, Task> f) => Index == 1 ? new ValueTask(f((U)_value)) : ValueTask.CompletedTask;

    public static implicit operator Result<T, U>(T value) => Ok(value);

    public static implicit operator Result<T, U>(U value) => Error(value);
}
}
