// <auto-generated />
#pragma warning disable CS8509
using System.Threading.Tasks;
namespace Tests {

public partial class IntOptional : IEquatable<IntOptional>
{
    private int _value;

    public int Index { get; private set; }

    private IntOptional(int index, int value)
    {
        Index = index;
        _value = value;
    }

    public bool Equals(IntOptional other) => other is not null && other.Index == Index && Equals(_value, other._value);

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;

        return Equals((IntOptional)obj);
    }

    public override int GetHashCode() => HashCode.Combine(Index, _value);

    public static bool operator==(IntOptional left, IntOptional right) => left.Equals(right);

    public static bool operator!=(IntOptional left, IntOptional right) => !left.Equals(right);

    public static IntOptional Some(int value) => new(0, value);

    public static readonly IntOptional None = new(1, default);

    public void Switch(Action<int> f0, Action f1)
    {
        switch (Index)
        {

        case 0: f0((int)_value); break;

        case 1: f1(); break;

        }
    }

    public Task Switch(Func<int, Task> f0, Func<Task> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1(),

        };
    }

    public TRet_ Match<TRet_>(Func<int, TRet_> f0, Func<TRet_> f1)
    {
        return Index switch
        {

            0 => f0((int)_value),

            1 => f1(),

        };
    }

    public bool IsSome => Index == 0;

    public bool IsNone => Index == 1;

    public void IfSome(Action<int> f)
    {
        if (Index == 0)
        {
            f((int)_value);
        }
    }

    public void IfNone(Action f)
    {
        if (Index == 1)
        {
            f();
        }
    }

    public ValueTask IfSome(Func<int, Task> f) => Index == 0 ? new ValueTask(f((int)_value)) : ValueTask.CompletedTask;

    public ValueTask IfNone(Func<Task> f) => Index == 1 ? new ValueTask(f()) : ValueTask.CompletedTask;

    public static implicit operator IntOptional(int value) => Some(value);
}
}
