// <auto-generated />
#pragma warning disable CS8509
using System.Threading.Tasks;
namespace Tests {

public partial class RepeatedTypes : IEquatable<RepeatedTypes>
{
    private object _value;

    public int Index { get; private set; }

    private RepeatedTypes(int index, object value)
    {
        Index = index;
        _value = value;
    }

    public bool Equals(RepeatedTypes other) => other is not null && other.Index == Index && Equals(_value, other._value);

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;

        return Equals((RepeatedTypes)obj);
    }

    public override int GetHashCode() => HashCode.Combine(Index, _value);

    public static bool operator==(RepeatedTypes left, RepeatedTypes right) => left.Equals(right);

    public static bool operator!=(RepeatedTypes left, RepeatedTypes right) => !left.Equals(right);

    public static RepeatedTypes A(string value) => new(0, value);

    public static RepeatedTypes B(int value) => new(1, value);

    public static RepeatedTypes C(string value) => new(2, value);

    public static RepeatedTypes D(double value) => new(3, value);

    public static RepeatedTypes E(int value) => new(4, value);

    public void Switch(Action<string> f0, Action<int> f1, Action<string> f2, Action<double> f3, Action<int> f4)
    {
        switch (Index)
        {

        case 0: f0((string)_value); break;

        case 1: f1((int)_value); break;

        case 2: f2((string)_value); break;

        case 3: f3((double)_value); break;

        case 4: f4((int)_value); break;

        }
    }

    public Task Switch(Func<string, Task> f0, Func<int, Task> f1, Func<string, Task> f2, Func<double, Task> f3, Func<int, Task> f4)
    {
        return Index switch
        {

            0 => f0((string)_value),

            1 => f1((int)_value),

            2 => f2((string)_value),

            3 => f3((double)_value),

            4 => f4((int)_value),

        };
    }

    public TRet_ Match<TRet_>(Func<string, TRet_> f0, Func<int, TRet_> f1, Func<string, TRet_> f2, Func<double, TRet_> f3, Func<int, TRet_> f4)
    {
        return Index switch
        {

            0 => f0((string)_value),

            1 => f1((int)_value),

            2 => f2((string)_value),

            3 => f3((double)_value),

            4 => f4((int)_value),

        };
    }

    public bool IsA => Index == 0;

    public bool IsB => Index == 1;

    public bool IsC => Index == 2;

    public bool IsD => Index == 3;

    public bool IsE => Index == 4;

    public void IfA(Action<string> f)
    {
        if (Index == 0)
        {
            f((string)_value);
        }
    }

    public void IfB(Action<int> f)
    {
        if (Index == 1)
        {
            f((int)_value);
        }
    }

    public void IfC(Action<string> f)
    {
        if (Index == 2)
        {
            f((string)_value);
        }
    }

    public void IfD(Action<double> f)
    {
        if (Index == 3)
        {
            f((double)_value);
        }
    }

    public void IfE(Action<int> f)
    {
        if (Index == 4)
        {
            f((int)_value);
        }
    }

    public ValueTask IfA(Func<string, Task> f) => Index == 0 ? new ValueTask(f((string)_value)) : ValueTask.CompletedTask;

    public ValueTask IfB(Func<int, Task> f) => Index == 1 ? new ValueTask(f((int)_value)) : ValueTask.CompletedTask;

    public ValueTask IfC(Func<string, Task> f) => Index == 2 ? new ValueTask(f((string)_value)) : ValueTask.CompletedTask;

    public ValueTask IfD(Func<double, Task> f) => Index == 3 ? new ValueTask(f((double)_value)) : ValueTask.CompletedTask;

    public ValueTask IfE(Func<int, Task> f) => Index == 4 ? new ValueTask(f((int)_value)) : ValueTask.CompletedTask;

    public static implicit operator RepeatedTypes(double value) => D(value);
}
}
