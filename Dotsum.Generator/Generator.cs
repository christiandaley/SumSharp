using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace Dotsum;

[Generator]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var dotsumClasses = 
            context.SyntaxProvider
            .ForAttributeWithMetadataName(
                fullyQualifiedMetadataName: "Dotsum.CaseAttribute",
                predicate: static (s, _) => IsSyntaxTargetForGeneration(s),
                transform: static (ctx, _) => ctx.TargetSymbol as INamedTypeSymbol)
            .Where(static m => m is not null)
            .Collect();

        context.RegisterSourceOutput(
            context.CompilationProvider.Combine(dotsumClasses),
            static (spc, source) => Execute(source.Left, source.Right!, spc));

        static bool IsSyntaxTargetForGeneration(SyntaxNode node)
        {
            return node switch
            {
                ClassDeclarationSyntax c => c.Modifiers.Any(SyntaxKind.PartialKeyword),
                StructDeclarationSyntax s => s.Modifiers.Any(SyntaxKind.PartialKeyword),
                _ => false,
            };
        }

        /*static INamedTypeSymbol? GetSemanticTargetForGeneration(GeneratorAttributeSyntaxContext context)
        {
            var symbol = context.TargetSymbol;

            if (symbol is not INamedTypeSymbol namedTypeSymbol)
            {
                return null;
            }

            var attributeData = namedTypeSymbol.GetAttributes().FirstOrDefault(ad =>
                string.Equals(ad.AttributeClass?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat), "global::Dotsum.CaseAttribute"));

            return attributeData is null ? null : namedTypeSymbol;
        }*/
    }

    private static void Execute(Compilation compilation, ImmutableArray<INamedTypeSymbol> targets, SourceProductionContext context)
    {
        var caseAttrSymbol = compilation.GetTypeByMetadataName("Dotsum.CaseAttribute")!;

        var sb = new StringBuilder();

        foreach (var symbol in targets.Distinct(SymbolEqualityComparer.Default))
        {
            sb.Clear();

            HandleSymbol((INamedTypeSymbol)symbol!);
        }

        void HandleSymbol(INamedTypeSymbol symbol)
        {
            var ns =
                symbol.ContainingNamespace.IsGlobalNamespace
                ? null
                : symbol.ContainingNamespace.ToDisplayString();

            sb.AppendLine("// <auto-generated />");

            if (!string.IsNullOrWhiteSpace(ns))
            {
                sb.AppendLine($"namespace {ns} {{");
            }

            var isStruct = symbol.TypeKind == TypeKind.Struct;

            var accessibility = symbol.DeclaredAccessibility switch
            {
                Accessibility.Public => "public",
                Accessibility.Internal => "internal",
                Accessibility.Protected => "protected",
                Accessibility.ProtectedAndInternal => "protected internal",
                Accessibility.Private => "private",
            };

            var name = symbol.Name;

            sb.AppendLine($@"
{accessibility} partial {(isStruct ? "struct" : "class")} {name}
{{
    private object _value;

    public int Index {{ get; private set; }}

    private {name}(int index, object value)
    {{
        Index = index;
        _value = value;
    }}");

            var cases = symbol!
                .GetAttributes()
                .Where(attr => SymbolEqualityComparer.Default.Equals(attr.AttributeClass, caseAttrSymbol))
                .Select((attr, i) => (attr.ConstructorArguments, i));

            foreach (var (arguments, index) in cases)
            {
                switch (arguments)
                {
                    case [var caseName]:

                        sb.AppendLine($@"
    public static readonly {name} {caseName.Value} = new({index}, null);");

                        break;
                    case [var caseName, var caseType] when caseType.Value is Type t:



                        break;
                }
            }

            sb.AppendLine("}");

            if (!string.IsNullOrWhiteSpace(ns))
            {
                sb.AppendLine("}");
            }

            context.AddSource($"{symbol.Name}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }
}